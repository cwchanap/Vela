name: Deploy to AWS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test

  build:
    needs: lint-and-test
    runs-on: ubuntu-latest
    outputs:
      lambda-artifact: ${{ steps.upload-lambda.outputs.artifact-id }}
      frontend-artifact: ${{ steps.upload-frontend.outputs.artifact-id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build Lambda function
        run: npm run lambda:build

      - name: Upload Lambda artifact
        id: upload-lambda
        uses: actions/upload-artifact@v4
        with:
          name: lambda-function-${{ github.sha }}
          path: dist/lambda/
          retention-days: 7

      - name: Upload frontend artifact
        id: upload-frontend
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist-${{ github.sha }}
          path: dist/spa/
          retention-days: 7

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: npm ci

      - name: Download Lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-function-${{ github.sha }}
          path: dist/lambda/

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist-${{ github.sha }}
          path: dist/spa/

      - name: Install CDK CLI
        run: npm install -g aws-cdk

      - name: Bootstrap CDK (if needed)
        run: cd infrastructure && npx cdk bootstrap --require-approval never

      - name: Deploy infrastructure with CDK
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: cd infrastructure && npx cdk deploy --require-approval never

      - name: Get deployment outputs
        id: get-outputs
        run: |
          WEBSITE_URL=$(aws cloudformation describe-stacks \
            --stack-name VelaStack \
            --query 'Stacks[0].Outputs[?OutputKey==`WebsiteURL`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})

          API_URL=$(aws cloudformation describe-stacks \
            --stack-name VelaStack \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiURL`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})

          CLOUDFRONT_DISTRIBUTION=$(aws cloudformation describe-stacks \
            --stack-name VelaStack \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})

          echo "website-url=$WEBSITE_URL" >> $GITHUB_OUTPUT
          echo "api-url=$API_URL" >> $GITHUB_OUTPUT
          echo "cloudfront-distribution=$CLOUDFRONT_DISTRIBUTION" >> $GITHUB_OUTPUT

      - name: Update deployment status
        run: |
          echo "ðŸš€ Production deployment completed!"
          echo "ðŸ“± Website URL: ${{ steps.get-outputs.outputs.website-url }}"
          echo "ðŸ”— API URL: ${{ steps.get-outputs.outputs.api-url }}"

  cleanup:
    if: always()
    needs: [build, deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: cleanup-artifacts-${{ github.sha }}
          pattern: '*-${{ github.sha }}'
          delete-merged: true
